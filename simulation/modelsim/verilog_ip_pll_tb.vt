// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/02/2017 20:26:10"
                                                                                
// Verilog Test Bench template for design : verilog_ip_pll
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ps
module verilog_ip_pll_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk_50M;
reg rst_n;
// wires                                               
wire led1;

// assign statements (if any)                          
verilog_ip_pll i1 (
// port map - connection between master ports and signals/registers   
	.clk_50M(clk_50M),
	.led1(led1),
	.rst_n(rst_n)
);
initial                                                
begin                                                  
	clk_50M=0;
	rst_n=0;
                 
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
	#10 clk_50M=~clk_50M;                                           
end                                                    
endmodule

